# -*- coding: utf-8 -*-
"""Week6(Hassan_Ahsan)_IPL_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pcklkkucb_Ld75uIQJKAthwoKkS_wBPV

# IPL Dataset Analysis

## Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

"""## Reading Data"""

from google.colab import drive
drive.mount('/content/drive')

df_matches = pd.read_csv("/content/drive/MyDrive/PrepInsta_Wokerd/week 6/IPL/matches.csv",index_col="id")
df_matches.head()

df_deliveries = pd.read_csv("/content/drive/MyDrive/PrepInsta_Wokerd/week 6/IPL/deliveries.csv")
df_deliveries.head()

"""## **matches.csv**

## Basic Data Exploration
"""

df_matches.shape

df_matches.info()

"""## Data Cleaning"""

df_matches.isnull().sum()

df_matches["umpire1"].fillna("Unknown", inplace=True)
df_matches["umpire2"].fillna("Unknown", inplace=True)
df_matches.drop(columns=["umpire3"], inplace=True)
df_matches.dropna(subset=["winner", "player_of_match"], inplace=True)
df_matches["city"].fillna("Unknown", inplace=True)

df_matches.isnull().sum()

df_matches.drop(columns=["Unnamed: 0"],inplace=True)

"""## Univariate Analysis"""

# Season Distribution
plt.figure(figsize=(8, 5))
sns.countplot(x='season', data=df_matches)
plt.title('Season Distribution')
plt.xlabel('Season')
plt.ylabel('Number of Matches')
plt.xticks(rotation=45)
plt.show()

# City Distribution
plt.figure(figsize=(10, 6))
sns.countplot(y='city', data=df_matches)
plt.title('City Distribution')
plt.xlabel('Number of Matches')
plt.ylabel('City')
plt.show()

plt.figure(figsize=(10, 6))
team_counts = pd.concat([df_matches['team1'], df_matches['team2']]).value_counts().sort_values()
team_counts.plot(kind='barh')
plt.title('Team Distribution')
plt.xlabel('Number of Matches')
plt.ylabel('Team')
plt.show()

plt.figure(figsize=(8, 8))
toss_decision_counts = df_matches['toss_decision'].value_counts()
labels = toss_decision_counts.index
plt.pie(toss_decision_counts, labels=labels, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff'],textprops={'fontsize':20})
plt.title('Toss Decision Distribution',fontdict={"fontsize":22})
plt.axis('equal')
plt.show()

plt.figure(figsize=(8, 8))
match_outcome_counts = df_matches['result'].value_counts()
labels = match_outcome_counts.index
plt.pie(match_outcome_counts, labels=labels, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff','#99ff99'],textprops={'fontsize':20})
plt.title('Match Outcome Distribution',fontdict={"fontsize":22})
plt.axis('equal')
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(y='venue', data=df_matches, order=df_matches['venue'].value_counts().index)
plt.title('Venue Distribution')
plt.xlabel('Number of Matches')
plt.ylabel('Venue')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(10, 6))
df_matches['player_of_match'].value_counts().head(10).plot(kind='bar')
plt.title('Top 10 Player of the Match')
plt.xlabel('Player')
plt.ylabel('Number of Awards')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
umpires = pd.concat([df_matches['umpire1'], df_matches['umpire2']]).value_counts().head(10)
umpires.plot(kind='bar')
plt.title('Top 10 Umpires')
plt.xlabel('Umpire')
plt.ylabel('Number of Matches')
plt.xticks(rotation=45)
plt.show()



"""## Bivariate Analysis"""

plt.figure(figsize=(8, 5))
sns.countplot(x='toss_decision', hue='result', data=df_matches)
plt.title('Toss Decision vs. Match Outcome')
plt.xlabel('Toss Decision')
plt.ylabel('Number of Matches')
plt.legend(title='Match Outcome')
plt.show()

plt.figure(figsize=(8, 12))
sns.countplot(y='city', hue='result', data=df_matches)
plt.title('City vs. Match Outcome')
plt.xlabel('City')
plt.ylabel('Number of Matches')
plt.xticks(rotation=90)
plt.legend(title='Match Outcome')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='season', hue='result', data=df_matches)
plt.title('Season vs. Match Outcome')
plt.xlabel('Season')
plt.ylabel('Number of Matches')
plt.legend(title='Match Outcome')
plt.show()

plt.figure(figsize=(12, 6))
win_counts = df_matches['winner'].value_counts()
sns.barplot(x=win_counts.values, y=win_counts.index)
plt.title('Team-wise Win Distribution')
plt.xlabel('Team')
plt.ylabel('Number of Wins')
plt.show()

plt.figure(figsize=(8, 8))
df_matches['toss_winner_match_winner'] = df_matches['toss_winner'] == df_matches['winner']
match_winner_counts = df_matches['toss_winner_match_winner'].value_counts()
labels = ['Toss Winner â‰  Match Winner', 'Toss Winner = Match Winner']
plt.pie(match_winner_counts, labels=labels, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff'],textprops={'fontsize':20})
plt.title('Toss Winner vs. Match Winner',fontdict={"fontsize":22})
plt.axis('equal')
plt.show()



"""## **deliveries.csv**

## Basic Data Exploration
"""

df_deliveries.shape

df_deliveries.info()

"""## Data Cleaning"""

df_deliveries.drop(columns=["Unnamed: 0"],inplace=True)

df_deliveries.isnull().sum()

df_deliveries.fillna({"player_dismissed": "Not Dismissed", "dismissal_kind": "Not Dismissed", "fielder": "No Fielder"}, inplace=True)

df_deliveries.isnull().sum()

df_deliveries["batting_team"] = df_deliveries["batting_team"].str.replace("Rising Pune Supergiant","Rising Pune Supergiants")
df_deliveries["batting_team"] = df_deliveries["batting_team"].str.replace("Rising Pune Supergiantss","Rising Pune Supergiants")
df_deliveries["bowling_team"] = df_deliveries["bowling_team"].str.replace("Rising Pune Supergiant","Rising Pune Supergiants")
df_deliveries["bowling_team"] = df_deliveries["bowling_team"].str.replace("Rising Pune Supergiantss","Rising Pune Supergiants")

"""## Univariate Analysis"""

plt.figure(figsize=(8, 5))
sns.histplot(df_deliveries['total_runs'], bins=20, kde=True)
plt.title('Runs Distribution')
plt.xlabel('Total Runs')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(8, 5))
sns.countplot(x='over', data=df_deliveries)
plt.title('Over Distribution')
plt.xlabel('Over')
plt.ylabel('Number of Balls')
plt.show()

plt.figure(figsize=(10, 6))
df_deliveries['batting_team'].value_counts().sort_values().plot(kind='barh')
plt.title('Batting Team Distribution')
plt.ylabel('Team')
plt.xlabel('Number of Deliveries')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
teams_df = df_deliveries[df_deliveries['bowling_team'] != 'Kings']
teams_df['bowling_team'].value_counts().sort_values().plot(kind='barh')
plt.title('Bowling Team Distribution')
plt.ylabel('Team')
plt.xlabel('Number of Deliveries')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
wickets_df = df_deliveries[df_deliveries['player_dismissed'] != 'Not Dismissed']
sns.countplot(y='dismissal_kind', data=wickets_df, order=wickets_df['dismissal_kind'].value_counts().index)
plt.title('Dismissal Kind Distribution')
plt.xlabel('Number of Dismissals')
plt.ylabel('Dismissal Kind')
plt.show()

"""## Bivariate Analysis"""

# Define bins for runs scored
bins = [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300]

# Create a new column for bins
df_deliveries['runs_bins'] = pd.cut(df_deliveries['total_runs'], bins=bins, right=False)

# Group by runs bins and count wickets taken
wickets_by_runs = df_deliveries.groupby('runs_bins')['player_dismissed'].count()

# Plot Bar Plot
plt.figure(figsize=(10, 6))
wickets_by_runs.plot(kind='bar', color='skyblue')
plt.title('Wickets Taken vs. Runs Scored')
plt.xlabel('Runs Scored Range')
plt.ylabel('Total Wickets Taken')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
top_batsmen = df_deliveries['batsman'].value_counts().head(10).index
top_bowlers = df_deliveries['bowler'].value_counts().head(10).index
batsman_bowler_performance = df_deliveries[df_deliveries['batsman'].isin(top_batsmen) & df_deliveries['bowler'].isin(top_bowlers)]
sns.boxplot(x='batsman', y='bowler', data=batsman_bowler_performance)
plt.title('Batsman vs. Bowler Performance')
plt.xlabel('Batsman')
plt.ylabel('Bowler')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
batsman_total_runs = df_deliveries.groupby('batsman')['batsman_runs'].sum().sort_values(ascending=False).head(10)
sns.barplot(x=batsman_total_runs.values, y=batsman_total_runs.index, palette='viridis')
plt.title('Top 10 Batsmen by Total Runs')
plt.ylabel('Batsman')
plt.xlabel('Total Runs')
plt.show()

plt.figure(figsize=(10, 6))
bowler_total_wickets = df_deliveries[df_deliveries['dismissal_kind'] != 'Not Dismissed']['bowler'].value_counts().sort_values(ascending=False).head(10)
sns.barplot(x=bowler_total_wickets.values, y=bowler_total_wickets.index, palette='magma')
plt.title('Top 10 Bowlers by Total Wickets')
plt.ylabel('Bowler')
plt.xlabel('Total Wickets')
plt.show()

plt.figure(figsize=(10, 6))
bowler_runs_conceded = df_deliveries.groupby('bowler')['total_runs'].sum().sort_values(ascending=False).head(10)
sns.barplot(x=bowler_runs_conceded.values, y=bowler_runs_conceded.index, palette='plasma')
plt.title('Top 10 Bowlers by Runs Conceded')
plt.ylabel('Bowler')
plt.xlabel('Runs Conceded')
plt.show()

plt.figure(figsize=(10, 6))
batting_team_vs_bowling_team = df_deliveries.groupby(['batting_team', 'bowling_team'])['total_runs'].sum().unstack()
sns.heatmap(batting_team_vs_bowling_team, cmap='viridis', annot=True, fmt=".0f", linewidths=.5)
plt.title('Batting Team vs. Bowling Team: Total Runs')
plt.xlabel('Bowling Team')
plt.ylabel('Batting Team')
plt.show()

