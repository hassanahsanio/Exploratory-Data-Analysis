# -*- coding: utf-8 -*-
"""week6(Hassan_Ahsan)Superstore_sales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mvvtvZ3iMkKZKMH4x4mOuYC2uQQsDyTf

**SUPER STORE SALES ANALYSIS**

*LIBRARIES ARE IMPORTED*
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
import warnings
warnings.filterwarnings("ignore")

"""*MOUNTING DATA*"""

from google.colab import drive
drive.mount('/content/drive')

"""*READING DATA*"""

df = pd.read_csv("/content/drive/MyDrive/PrepInsta_Wokerd/week 6/Superstore Sales/train.csv")
df.head()

"""*BASIC EXPLORATION*"""

df.shape

df.info()

"""*DATA CLEANING*"""

df.drop(columns='Row ID', inplace = True)

df.head()

df['Order Date'] = pd.to_datetime(df["Order Date"], format = '%d/%m/%Y')
df['Ship Date'] = pd.to_datetime(df["Order Date"], format = '%d/%m/%Y')

df.info()

df.isna().sum()

df[df['Postal Code'].isna()]

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['Ship Mode'].value_counts()
    for x_label, grp in _df_10.groupby('Order ID')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('Order ID')
_ = plt.ylabel('Ship Mode')

df.fillna(5401,inplace=True)

df.isna().sum()

df[(df['State']=='Vermont')&(df['City']=='Burlington')]

from matplotlib import pyplot as plt
_df_27['Sales'].plot(kind='line', figsize=(8, 4), title='Sales')
plt.gca().spines[['top', 'right']].set_visible(False)

df['Postal Code'] = df['Postal Code'].astype('int')

df.dtypes

"""*UNIVARIATE ANALYSIS*"""

print("Summary Statistics for Numeric Variables:")
df.describe()

from matplotlib import pyplot as plt
_df_39['Postal Code'].plot(kind='line', figsize=(8, 4), title='Postal Code')
plt.gca().spines[['top', 'right']].set_visible(False)

plt.figure(figsize=(10, 6))
sns.histplot(df['Sales'], bins=30, kde=True)
plt.title('Distribution of Sales')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.show()

"""THE DISTRIBUTION OF THE SALES VALUES ARE SHOWN IN THE HISTOGRAM"""

plt.figure(figsize=(8, 6))
sns.boxplot(y='Sales', data=df)
plt.title('Box Plot of Sales')
plt.ylabel('Sales')
plt.show()

"""THE BOX PLOT PROVIDES A VISUAL SUMMARY OF THE CENTRAL TENDENCY, DISPERSION, AND OUTLINERS IN THE SALES DATA

*CATEGORAICAL VARIABLES*
"""

segment_counts = df['Segment'].value_counts()
print("\nFrequency count for Segment:")
print(segment_counts)

plt.figure(figsize=(8, 6))
sns.countplot(x='Segment', data=df, palette='viridis')
plt.title('Count of Orders by Segment')
plt.xlabel('Segment')
plt.ylabel('Count')
plt.show()

"""FREQUENCY COUNT OF ORDERS FOR EACH SEGMENT IS DISPLAYED"""

plt.figure(figsize=(8, 6))
sns.countplot(x='Ship Mode', data=df, palette='viridis')
plt.title('Count of Orders by Ship Mode')
plt.xlabel('Ship Mode')
plt.ylabel('Count')
plt.show()

"""FREQUENCY COUNT OF ORDERS FOR EASHI SHIPPING MODE IS CATEGORISED"""

plt.figure(figsize=(10, 6))
sns.countplot(x='Category', data=df, palette='Set3')
plt.title('Count of Orders by Category')
plt.xlabel('Category')
plt.ylabel('Count')
plt.show()

"""THE FREQUENCY COUNT OF ORDERS FOR EACH PRODUCT CATEGOREY"""

region_counts = df['Region'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(region_counts, labels=region_counts.index, autopct='%1.1f%%', startangle=140,textprops={'fontsize':20})
plt.title('Distribution of Orders by Region',fontdict={"fontsize":22})
plt.axis('equal')
plt.show()

"""DISPLAY THE DISTRUBUTION OF ORDERS ACROSS DIFFERENT REGIONS

**BIVARIATE ANALYSIS**
"""

plt.figure(figsize=(10, 6))
plt.scatter(df['Order Date'], df['Sales'], alpha=0.5)
plt.title('Sales over Time')
plt.xlabel('Order Date')
plt.ylabel('Sales')
plt.show()

"""SALE AND ORDER DATES RELATIONSHIP"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Postal Code', y='Sales', data=df)
plt.title('Sales vs Postal Code')
plt.xlabel('Postal Code')
plt.ylabel('Sales')
plt.show()

"""SALES AND POSTAL CODES RELATIONSHIP EXPALINED IN THE SCATTER PLOT"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='Category', y='Sales', data=df, palette='Paired')
plt.title('Sales by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.show()

"""DISTRIBUTION OF SALES ACROSS DIFFERENT PRODUCT CATOGORIES IS DIFFERENTIATED"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='Segment', y='Sales', data=df, palette='Set2')
plt.title('Sales by Segment')
plt.xlabel('Segment')
plt.ylabel('Sales')
plt.show()

"""DISTRIBUTION OF SALES ACROSS DIFFERENT SEGMENTS IS COMPARED"""

cross_tab = pd.crosstab(df['Segment'], df['Ship Mode'])
print("\nCross-tabulation of Segment and Ship Mode:")
print(cross_tab)

plt.figure(figsize=(10, 6))
cross_tab.plot(kind='barh', stacked=True)
plt.title('Segment vs Ship Mode')
plt.ylabel('Segment')
plt.xlabel('Count')
plt.show()

"""VISZUALTION IS EXPLORED THE RELATIONSHIP BETWEEN CUSTOMERS SEGMENTS AND SHIPPING MODES"""

correlation_matrix = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix',fontdict={"fontsize":16},
)
plt.show()

"""HEATMAP REPRESENT THE VISUALIZE THE CORRELATION BETWEEN NUMERIC VARIABLES IN THE DATASET"""

sns.pairplot(df.select_dtypes(include=['float64', 'int64']))
plt.show()

"""PAIR PLOT DEPICTS THE PAIRWISE RELATIONSHIP BETWEEN NUMERIC VARIABLES.

*TIME SERIES ANALYSIS*
"""

daily_sales = df.groupby('Order Date')['Sales'].sum()
plt.figure(figsize=(12, 6))
daily_sales.plot()
plt.title('Daily Sales Over Time')
plt.xlabel('Order Date')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

"""REPRESENTATION OF SALES ACROSS DIFFERENT TIME

*SEASONAL DECMPOSITION*
"""

daily_sales.index = pd.to_datetime(daily_sales.index)
daily_sales = daily_sales.interpolate(method='linear')
daily_sales = daily_sales.asfreq('D')
decomposition = seasonal_decompose(daily_sales, model='additive')

plt.figure(figsize=(12, 8))
plt.subplot(411)
plt.plot(decomposition.trend)
plt.title('Trend')
plt.subplot(412)
plt.plot(decomposition.seasonal)
plt.title('Seasonality')
plt.subplot(413)
plt.plot(decomposition.resid)
plt.title('Residuals')
plt.subplot(414)
plt.plot(daily_sales, label='Original')
plt.legend(loc='best')
plt.title('Original')
plt.tight_layout()
plt.show()

"""INTENT: THE PURPOSE OF SEASONLA DECOMPOSITION IS TO DECOMPOSE A TIME SERIES INTO ITS CONSTITUENT COMPONENTS, INCLUDING TREND, SEASONALTIY, AND RESIDUALS.



*   TREND: IDENTIFIES THE LONG TERM MOVEMENT OR DIRECTION OF THE SALES DATA, HELPING TO DISCAERN OVERALL GROWTH OR DECLINE.
*   SEASONALITY: REVEALS THE REPETATIVE PATTERNS OF CYCLES WITHIN THE DATA SUCH AS WEEKLY, MONTHLY, OR YEARLY FLUCTUATIONS.
* RESIDUALS: REPRESENTS THE RANDOM VARIATIONS OR NOISE IN THE DATA AFTER REMOVING THE TREND AND SEASONALTIY, WHICH CAN BE USEFUL FOR INDENTIFYING DIVERGENCE OR IRREGULARITIES.


"""

