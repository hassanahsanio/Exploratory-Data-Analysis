# -*- coding: utf-8 -*-
"""Week6(hassan_ahsan)_IndianCar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xGusMkTd3N1juvi_IfgRpwoZeHJLLaoW

INDIAN CARSS DATA ANALYSIS
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

"""*MOUNTING DATA*"""

from google.colab import drive
drive.mount('/content/drive')

"""*READING DATA*"""

df = pd.read_csv("/content/drive/MyDrive/PrepInsta_Wokerd/week 6/Indian Cars/cars_ds_final.csv",index_col=0)
df.head()

"""*BASIC DATA EXPLORATION*"""

df.shape

df.isna().sum()

df.columns

df.columns = df.columns.str.lower()
df.columns

"""*DATA CEALNING*"""

new = df[['make','model','ex-showroom_price','body_type','displacement', 'cylinders', 'fuel_system', 'fuel_tank_capacity', 'fuel_type', 'city_mileage', 'seating_capacity','basic_warranty', 'child_safety_locks', 'number_of_airbags', 'parking_assistance', 'navigation_system']]

new.head()

new.replace({"Maruti Suzuki R":"Maruti Suzuki","Land Rover Rover":"Land Rover"},inplace=True)

new["make"].value_counts()

new["ex-showroom_price"]

new["ex-showroom_price"]=new["ex-showroom_price"].str.replace("Rs. ","")
new["ex-showroom_price"]=new["ex-showroom_price"].str.replace(",","").astype(int)

new["ex-showroom_price"]

new.isna().sum()

new["displacement"].fillna("0", inplace=True)
new["fuel_tank_capacity"].fillna("0", inplace=True)
new["city_mileage"].fillna("0",inplace=True)

new["displacement"]=new["displacement"].str.replace(" cc","").astype(int)
new["fuel_tank_capacity"]=new["fuel_tank_capacity"].str.replace(" litres","").astype(float)

new.info()

new.isnull().sum()

missing_percent = (new[new.columns[new.isnull().any()]].isnull().sum() / len(new)) * 100
print("Percentage of missing values:\n", missing_percent)

new["displacement"].replace(0,new["displacement"].mean(),inplace=True)
new["fuel_tank_capacity"].replace(0,new["fuel_tank_capacity"].mean(),inplace=True)
new['cylinders'] = new['cylinders'].fillna(new['cylinders'].mean())
new['seating_capacity'] = new['seating_capacity'].fillna(new['seating_capacity'].mean())
new['number_of_airbags'] = new['number_of_airbags'].fillna(new['number_of_airbags'].mean())

new['make'] = new['make'].fillna(new['make'].mode()[0])
new['body_type'] = new['body_type'].fillna(new['body_type'].mode()[0])
new['make'] = new['make'].fillna(new['make'].mode()[0])
new['fuel_system'] = new['fuel_system'].fillna(new['fuel_system'].mode()[0])
new['child_safety_locks'] = new['child_safety_locks'].fillna(new['child_safety_locks'].mode()[0])
new['basic_warranty'] = new['basic_warranty'].fillna(new['basic_warranty'].mode()[0])
new['parking_assistance'] = new['parking_assistance'].fillna(new['parking_assistance'].mode()[0])
new['navigation_system'] = new['navigation_system'].fillna(new['navigation_system'].mode()[0])

new.isnull().sum()

new.info()

"""*UNIVARIATE ANALYSIS*"""

print("Summary Statistics for Numeric Variables:")
df.describe()

from matplotlib import pyplot as plt
_df_3['seating_capacity'].plot(kind='hist', bins=20, title='seating_capacity')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_2['doors'].plot(kind='hist', bins=20, title='doors')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_1['valves_per_cylinder'].plot(kind='hist', bins=20, title='valves_per_cylinder')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_0['cylinders'].plot(kind='hist', bins=20, title='cylinders')
plt.gca().spines[['top', 'right',]].set_visible(False)

numeric_cols = ['displacement', 'cylinders', 'fuel_tank_capacity', 'seating_capacity', 'number_of_airbags']
for col in numeric_cols:
    plt.figure(figsize=(13, 6))
    sns.histplot(df[col], bins=30, kde=True, color='skyblue', edgecolor='black')
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.show()

make_counts = df['make'].value_counts()
print("\nFrequency count for make:")
print(make_counts)

plt.figure(figsize=(15, 8))
sns.countplot(y='make', data=df, palette='viridis')
plt.title('Count of Cars by Brand')
plt.ylabel('Brand')
plt.xlabel('Count')
plt.show()

body_type_counts = df['body_type'].value_counts()
plt.figure(figsize=(10, 6))
sns.countplot(y='body_type', data=df, palette='viridis', order=body_type_counts.index)
plt.title('Count of Cars by Body Type')
plt.xlabel('Count')
plt.ylabel('Body Type')
plt.show()

"""**BIVARAITE ANALYSIS**"""

cross_tab = pd.crosstab(df['fuel_type'], df['navigation_system'])
print("\nCross-tabulation of Fuel Type and Navigation System:")
print(cross_tab)

plt.figure(figsize=(10, 6))
cross_tab.sort_values(by='Yes').plot(kind='barh', stacked=True)
plt.title('Fuel Type vs Navigation System')
plt.ylabel('Fuel Type')
plt.xlabel('Count')
plt.legend(loc="lower right")
plt.show()

plt.figure(figsize=(10, 10))
sns.scatterplot(x='seating_capacity', y='fuel_tank_capacity', data=df)
plt.title('Seating Capacity vs Fuel Tank Capacity')
plt.xlabel('Seating Capacity')
plt.ylabel('Fuel Tank Capacity')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x="seating_capacity", y="body_type", data=df,orient='h', palette='Set2')
plt.title('Seating Capacity by Body Type')
plt.ylabel('Body Type',rotation=90)
plt.xlabel('Seating Capacity')
plt.show()

plt.figure(figsize=(10, 8))
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='viridis', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix ')
plt.show()